#define SIZE 7

typedef Node {
	int x;
	int y;
	int left;
	int right;
};

typedef Record {
	int index;
	bool goLeft;
};

typedef QueueRecord {
	int index;
	int depth;
};

Node treap[SIZE];
bool uses[SIZE];
int root = -1;
int size = 0;

Record stack[SIZE];

bool is_heap = true;

Record isTreeQueue[SIZE];
bool is_tree = true;

QueueRecord heightQueue[SIZE];
int height = 0;

bool inserting = false;
bool removing = false;

inline isHeap() {
	is_heap = true;
	int index;
	do
	:: index == SIZE -> break;
	:: index != SIZE && !uses[index] -> index++;
	:: else -> 
		is_heap = is_heap &&
		(treap[index].left == -1 || treap[index].left != -1 && treap[index].y >= treap[treap[index].left].y) &&
		(treap[index].right == -1 || treap[index].right != -1 && treap[index].y >= treap[treap[index].right].y);
		index++;
	od;
}

inline isTree() {
	is_tree = true;
	int index;
	do
	:: index == SIZE -> break;
	:: index != SIZE && !uses[index] -> index++;
	:: else ->
		int queueSize = 0;
		if
		:: treap[index].left != -1 ->
			isTreeQueue[queueSize].index = treap[index].left;
			isTreeQueue[queueSize].goLeft = true;
			queueSize++;
		:: else -> skip;
		fi;
		if
		:: treap[index].right != -1 ->
			isTreeQueue[queueSize].index = treap[index].right;
			isTreeQueue[queueSize].goLeft = false;
			queueSize++;
		:: else -> skip;
		fi;
		
		int queueIndex = 0;
		do
		:: queueIndex == queueSize -> break;
		:: else ->
			int i = isTreeQueue[queueIndex].index;
			bool goLeft = isTreeQueue[queueIndex].goLeft;
			if
			:: goLeft -> is_tree = is_tree && treap[i].x < treap[index].x;
			:: else -> is_tree = is_tree && treap[i].x > treap[index].x;
			fi;
			if
			:: treap[i].left != -1 ->
				isTreeQueue[queueSize].index = treap[i].left;
				isTreeQueue[queueSize].goLeft = goLeft;
				queueSize++;
			:: else -> skip;
			fi;
			if
			:: treap[i].right != -1 ->
				isTreeQueue[queueSize].index = treap[i].right;
				isTreeQueue[queueSize].goLeft = goLeft;
				queueSize++;
			:: else -> skip;
			fi;
			queueIndex++;
		od;
		index++;
	od;
}

inline computeHeight() {
	if
	:: root == -1 -> height = 0;
	:: else ->
		heightQueue[0].index = root;
		heightQueue[0].depth = 1;
		int queueSize = 1;
		int h = 0;
		int queueIndex = 0;
		do
		:: queueIndex == queueSize ->
			height = h;
			break;
		:: else -> 
			int index = heightQueue[queueIndex].index;
			int depth = heightQueue[queueIndex].index;
			if
			:: depth > h -> h = depth;
			:: else -> skip;
			fi;
			if
			:: treap[index].left != -1
				heightQueue[queueSize].index = treap[index].left
				heightQueue[queueSize].depth = depth + 1;
				queueSize++;
			:: else -> skip;
			fi;
			if
			:: treap[index].right != -1
				heightQueue[queueSize].index = treap[index].right
				heightQueue[queueSize].depth = depth + 1;
				queueSize++;
			:: else -> skip;
			fi;
			queueIndex++;
		od;
	fi;
}


inline split(nodeIndex, key, outLeftIndex, outRightIndex) {
	printf("split. index: %d, key: %d\n", nodeIndex, key);
	int curIndex = nodeIndex;
	int sp = 0;
	int t1, t2;

	do
	::
		printf("curIndex: %d\n", curIndex);
		if
		:: curIndex == -1 -> 
			t1 = -1; 
			t2 = -1;
			break;
		:: curIndex != -1 && treap[curIndex].x < key ->
			stack[sp].index = curIndex;
			stack[sp].goLeft = false;
			curIndex = treap[curIndex].right;
			sp++;
		:: else -> 
			stack[sp].index = curIndex;
			stack[sp].goLeft = true;
			curIndex = treap[curIndex].left;
			sp++;
		fi;
	od;


	printf("sp: %d\n", sp);
	do
	:: sp > 0 -> 
		sp--;
		int index = stack[sp].index;
		bool goLeft = stack[sp].goLeft;
		printf("split. index: %d, go left: %d\n", index, goLeft);
		if
			:: goLeft ->
				treap[index].left = t2;
				t2 = index;
			:: else -> 
				treap[index].right = t1;
				t1 = index;
		fi;
	:: sp == 0 -> 
		outLeftIndex = t1;
		outRightIndex = t2;
		printf("split result. outLeftIndex: %d, outRightIndex: %d\n", outLeftIndex, outRightIndex);
		break;
	:: else -> skip;
	od;
}

inline merge(leftIndex, rightIndex, outIndex) {
	printf("merge: leftIndex: %d, rightIndex: %d\n", leftIndex, rightIndex);
	int sp = 0;
	int curLeftIndex = leftIndex;
	int curRightIndex = rightIndex;
	int resIndex;

	do
	::
		printf("curLeftIndex: %d, curRightIndex: %d\n", curLeftIndex, curRightIndex);
		if
		:: curLeftIndex == -1 && curRightIndex == -1 ->
			resIndex = -1;
			break;
		:: curLeftIndex == -1 && curRightIndex != -1 -> 
			resIndex = curRightIndex;
			break;
		:: curLeftIndex != -1 && curRightIndex == -1 -> 
			resIndex = curLeftIndex;
			break;
		:: curLeftIndex != -1 && curRightIndex != -1 && treap[curLeftIndex].y > treap[curRightIndex].y -> 
			stack[sp].index = curLeftIndex;
			stack[sp].goLeft = false;
			curLeftIndex = treap[curLeftIndex].right;
			sp++;
		:: else ->
			stack[sp].index = curRightIndex;
			stack[sp].goLeft = true;
			curRightIndex = treap[curRightIndex].left
			sp++;
		fi;
	od;

	printf("sp: %d\n", sp);
	do
	:: sp == 0 ->
		outIndex = resIndex;
		printf("merge result: outIndex: %d\n", outIndex);
		break;
	:: else -> 
		sp--;
		int index = stack[sp].index;
		bool goLeft = stack[sp].goLeft;
		printf("merge. index: %d, go left: %d\n", index, goLeft);
		if
		:: goLeft -> treap[index].left = resIndex;
		:: else -> treap[index].right = resIndex;
		fi;
		resIndex = index;
	od;
}

inline find(key, result) {
	int index = root;
	do
	:: index == -1 -> 
		result = false;
		break;
	:: index != -1 && treap[index].x == key ->
		result = true;
		break;
	:: index != -1 && treap[index].x > key ->
		index = treap[index].left;
	:: else ->
		index = treap[index].right;
	od;
}

inline freePlace(out) {
	int i = 0;
	do
	:: i == SIZE ->
		out = -1;
		break;
	:: else -> 
		if
		:: !uses[i] ->
			out = i;
			break;
		:: else -> i++
		fi;
	od;
}

inline insert(key, random) {
	inserting = true;
	bool hasKey;
	find(key, hasKey);
	if
	:: !hasKey -> 
		int newNodeIndex;
		freePlace(newNodeIndex);
		if
		:: newNodeIndex == -1 -> skip;
		:: else ->
			uses[newNodeIndex] = true; 
			size++;
			treap[newNodeIndex].x = key;
			treap[newNodeIndex].y = random;
			treap[newNodeIndex].left = -1;
			treap[newNodeIndex].right = -1;

			int l, r;
			split(root, key, l, r);
			merge(l, newNodeIndex, root);
			merge(root, r, root);
		fi;
	:: else -> skip;
	fi;
	isHeap();
	isTree();
	computeHeight();
	inserting = false;
}

inline remove(key) {
	removing = true;
	int l, m, r;
	split(root, key, l, r);
	split(r, key + 1, m, r);
	if
	:: m != -1 -> 
		uses[m] = false;
		size++;
	:: else -> skip;
	fi;
	merge(l, r, root);
	isHeap();
	isTree();
	computeHeight();
	removing = false;
}

proctype main() {
	printf("start\n");
	int value;
	int a;
	do
	:: size < SIZE ->
		select(value: 0..10);
		select(a: 0..10);
		printf("insert %d\n", value);
		insert(value, a);
	:: else -> break;
	od;
	do
	:: size > 0 ->
		select(value: 0..10);
		printf("remove %d\n", value);
		remove(value);
	:: else -> break;
	od;
}

init {
	run main()
}

// Декартово дерево всегда является бинарной кучей по y
ltl heap_invariant { [] (is_heap) }
// Декартово дерево всегда является бинарным деревом поиска по x
ltl tree_invariant { [] (is_tree) }
// Операция вставки конечна
ltl finite_insert { [] (inserting -> (<> (!inserting))) }
// Операция удаления конечна
ltl finite_remove { [] (removing -> (<> (!removing))) }
// Высота дерева всегда не больше 4
ltl max_height { [] (height <= 4) }
